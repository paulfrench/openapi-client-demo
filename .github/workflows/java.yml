name: Build and Deploy Java Client

on:
  workflow_run:
    workflows: ["Tag Repo from OpenAPI Version"]
    types:
      - completed
jobs:
  generate-client:
    name: Generate Java Client, Build, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 1: Set up Java without caching (since pom.xml doesn't exist yet)
      - name: Set up JDK 17 (without cache)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 2: Install OpenAPI Generator
      - name: Install OpenAPI Generator
        run: |
          wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.8.0/openapi-generator-cli-7.8.0.jar -O openapi-generator-cli.jar

      # Step 3: Generate Java Client from OpenAPI Spec (this creates the pom.xml)
      - name: Generate Java Client from OpenAPI Spec
        run: |
          java -jar openapi-generator-cli.jar generate \
          -i ./openapi.yml \
          -g java \
          -o ./generated-client \
          --artifact-id my-java-client \
          --group-id com.openapi
      # Step 4: Set up Java again, but now enable Maven caching since pom.xml is available
      - name: Set up JDK 17 (with Maven cache)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven  # Maven caching is enabled here now that pom.xml exists

      # Step 5: Build the Maven Project (now with caching)
      - name: Build Maven Project
        run: |
          cd ./generated-client
          mvn clean install
      # Step 6: Deploy to Github
 # Upload the generated JAR file as an artifact
      - name: Upload JAR file
        uses: actions/upload-artifact@v4
        with:
          path: ./generated-client/target/my-java-client-*.jar      

      # Step 6: Deploy to Maven Repository
#      - name: Deploy to Maven Repository
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # For GitHub Packages
#          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}  # For Maven Central/Private Repo
#          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}  # For Maven Central/Private Repo
#        run: |
#          cd ./generated-client
#          mvn deploy -DskipTests=true -DaltDeploymentRepository=<repository-id>::default::https://<your-maven-repo-url>
